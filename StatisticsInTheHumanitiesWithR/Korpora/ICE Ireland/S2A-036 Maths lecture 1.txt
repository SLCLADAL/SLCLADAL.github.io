<ICE-IRE:S2A-036 Maths Lecture 1><I><ICE-IRE:S2A-036$A> <#> Anyway <,> here 's an example uhm which I 'd just got you to write down the last day but which uhm well I hadn't had time to explain <#> Let me talk more about it now <,> <#> Especially to non-computer science people <#> I hope <,> it makes some sort of sense to you computer science characters out there <,> but the rest of you <,> including myself <,> let me try to explain it <#> What it 's about <,> is that you have some sort of a programme which calculates variables uhm and <,> this this programme is going to the same loop again and again <#> The loop consists of eight steps so the programme calculates something on step one step two step three down to step eight and then goes back to step one again <#> So this is a loop <#> So <,> seven follows six <,> eight follows seven <,> and one follows eight <#> Okay you keep going round and round in here <#> Now there are four variables that you need to store temporarily at different stages as you go through this process <,> <#> And that 's what these lines are meant to indicate <,> <#> Variable A you need to store during steps one two and three <,> <#> You need to store <#> You don't need it in step four <,> and you need to store it again in steps five and six <,> <#> And likewise B is needed in steps what is it three four five <#> C C is needed in steps six seven eight <,> and D is needed in step eight <,> followed by step one <,> remember this is a loop <#> So you need it in eight and then you need it in the following step which is one as well <,> <#> Now the question is <,> okay you have to store these things somewhere or other and that 's that 's this phrase above called index registers <,> <#> Each of these variables <,> when it 's being stored is stored in something called an index <.> re </.> register <,> and an an index register can hold exactly one variable <,> <#> So the question in all of this is how many index registers do you need in the sense of what 's the minimum number that you need <,> <#> Obviously four of them are enough <#> You could have one which you labelled A and it <,> stored A some of the time <,> did nothing some of the time <,> stored A again and then did nothing <,> <#> And then you could 've another one that stored B some of the time and the rest of the time did absolutely nothing <,> <#> So you could <,> and so on <#> You could have another one that stored C and a fourth that stored D <#> So you could do it with four storage <,> four index registers <,> <#> But the question is what 's the minimum number that you can do it with <,> <#> So <,> let me continue <#> Uh well hold on <#> Before I go on to try to analyse this <#> The analysis is actually quite short <,> it 's shorter than than the <,> description of the problem <#> Is there any questions so far on the the description of what 's going on here <#> Is everyone clear on that <,> <#> Is that clear enough <#> Yes <#> Is anyone awake <#> Okay <#> Alright <#> So clearly four registers <,> that 's assigning one of these registers to each of the four variables A B C D <#> Obviously four registers <,> one per variable will suffice <,> but that 's that 's clear from the word go but we 'd like to do it more economically than that if possible <,,> <#> Now I 've written down there <mention> could be used less </mention> but <,> as I see it in writing I realise I should be saying is <mention> could be used fewer </mention> <,,> <#> Oops <#> So four registers will work but <,> can we get away with say three or two or one <,,> <#> So could we use fewer than four <,> <#> So could we have a register of let 's <,> say some of the time <,> let 's see <,> for example B and C are not needed at the same time <#> You could 've a register that stores B some of the time and stores C some of the time <,> <#> Okay and some of the time it 's doing nothing again but <,> that 's you know instead of having a separate register for B and a <.> sep </.> and for and another second one for C <,> just have one register that sometimes does B sometimes does C <#> That can obviously be done <#> So at a glance you could say that well just doing that alone <,> <#> You could have a register for A <#> You could have a register that does B and C so to speak <,> and a register for D and three registers will work <#> That 's at a glance <#> So <,> <.> wha </.> can you go further <#> Could you use two <,> <#> Now a naive <,> interpretation <,> or perhaps interpretation isn't the best word but <,> a naive interpretation of the problem would be as follows <#> You look at the problem and you would say look <,> at any one moment in this particular <,> uhm <,> loop <,> you never need more than two variables at the same time <#> On step one you need A and D simultaneously <#> On step two you need only A <#> Step three you need A and B simultaneously and so on <,> <#> But on every step you only need at most two variables <#> And so you might argue from that <,> that uhm at most two index registers are needed cos you never need to store more than two things at the same time <,> <#> Well you might argue like in fact as we 'll see you 'd be wrong <#> So <,> at any one time only two variables are being temporarily stored <#> We never need to store more than two things at a time so are <,> would two of these index registers <,> two of these storage places suffice <,,> <#> At any one time only two variables are being temporarily stored <,> <#> So <,> would two registers suffice <,,> <#> Now you could try by experiment to try and allocate <,> working with two registers <,> to allocate them to different variables at different times and see does it work out <#> In fact it won't <,> but I <,> rather than do it just as a computer science problem I want to of course turn it into a graph theory problem <#> That 's what the course is all about <#> I 'll analyse it from that point of view <,,> <#> Now <,> the the basic <,> thing here and I 'll write this down in a second <,> is that <,> there <,> you are trying to allocate variables to registers <,> but conflicts arise <,> in that uhm you may want <,> for the same register you may be trying to put two variables in the same register at the same time and when you 've conflict problems you generally have a graph colouring problem <#> I 'll say more about this in a second <#> I I 'm going to construct a graph G that corresponds to the problem <,,> <#> Now <,> I think for this example maybe <,> of all the examples in the whole course this is the example where it 's hardest to guess what the graph should be <,> <#> It 's not obvious at all I think <#> Uhm well what do you think you might try as the nodes or edges in this particular graph <#> Any ideas <,,> <#> I mean just just make a guess <,> <#> It 's a it 's <,> if someone makes a guess we can work from that perhaps to something else <#> Any ideas<ICE-IRE:S2A-036$B> <#> The variables<ICE-IRE:S2A-036$A> <#> <.> Ok </.> okay the A B C D <#> Okay try the nodes as the variables <#> And then <,> what 'll the edges be <#> When do we join two variables by an edge <,> <#> You 're on you 're on the right track <#> It 's it 's not the <.> ri </.> it 's not actually perfect as we 'll see but it 's almost correct <#> If you take the nodes as the variables uhm when then are <,> do we join two variables by an edge do you think <#> Again it has to somehow represent the data of the problem <,> the the graph that you draw <,> has to somehow <,> you 've to somehow transfer this data onto a graph <#> So if the nodes were the variables <,> when would you <,> when do you think you might link two variables by an edge <,,> <#> Can you guess<ICE-IRE:S2A-036$C> <#> If you need them at the same time<ICE-IRE:S2A-036$A> <#> If you need them at the same time <#> Okay <,> <#> That 's basically it <,> <#> If if two variables are wanted at the same time like A and B you can join them by an edge <,> <#> Now <,> that 's almost correct <,> <#> The only problem comes up in that <,> okay A clashes with B here and in some sense although here A clashes with B as well it 's not the same A so to speak <,> <#> It 's it 's a it 's a <,> it 's another appearance of A <#> And the only thing <,> the only thing wrong with what we said so far is that instead of having uh nodes corresponding to variables I 'll use a different node for this appearance of A than from this appearance of A here <,> okay <,> <#> So it 's a slight modification of <unclear> several words </unclear> as being the variables themselves but as I say that that 's far from obvious <,> <#> Don't don't regard this as an easy or obvious step <,> <#> To construct a graph G with nodes corresponding to storage periods of different variables <,,> <#> Nodes corresponding to storage periods of different variables and edges joining each pair of nodes corresponding to overlapping periods <,,> <#> And edges joining each pair of nodes corresponding to overlapping periods <,,> <#> Now the sentence is a bit of a mouthful <#> What 's it saying <,> <#> I 've talked about the nodes already <,> <#> The nodes are basically B C and D and a node I 'll call A one and another node I 'll call A two <,> corresponding to the two times that A shows up in this loop <,> <#> The edges <,> simply <.> co </.> join two nodes that happen to clash in the sense that they uhm <,> that they both <,> you need both their values at the same time in the loop <,> <#> Now <,> I asked you to draw the graph actually the hard way around in a sense that I asked you what 're the nodes and then what 're the edges <#> You 've heard me ask that question several times before <#> It 's the usual way that you try to model a problem by a graph <#> You draw the nodes then the edges <,> <#> However <,> when it comes to problems like this where there 's a conflict involved and the conflict in this <.> sta </.> in this case is that you have two variables that are required at the same time so they can't be in the same index register <,> they 're in conflict in some sense <#> With conflict problems it often works out better from your point of view if you try to think of first of all what are the edges then are the nodes <#> That may sound like it 's logically impossible but in fact <,> it it may not be so obvious with this problem which I think is a tricky one <,> but with other problems on the handout which are graph colouring problems uhm <,> in general if there 's a conflict there of some sort like this one I talked about the last day of putting animals in cages in the zoo okay <#> You 'd be better off looking for the conflicts first and the nodes second <#> The conflicts in that <.> sta </.> in that situation would be <,> well tigers and rabbits are in conflict okay the one eats the other <,> alright that situation <#> So let me just mention this here <,> <#> Note <,> edges model conflicts between nodes <,> <#> This is common in colouring problems <,,> <#> Edges model conflicts between nodes <,> <#> This is common in colouring problems <,,> <#> Now I 've put the word <mention> common </mention> in there uhm just for insurance <#> My experience has been that this is always the case in colouring problems but mathematicians are by nature cautious <,> so I hesitate to write down this as always true <,> in case someone runs with an example next week which shows it 's not true <,> <#> But every example I can ever recollect seeing of a colouring problem the edges model a conflict of some sort <#> Okay after all that <,> what 's the graph <#> Well this is the graph <#> It 's a very simple graph <#> The nodes there are the <,> well the variables B C and D <,> and A crops up twice because it 's stored twice in the process of this loop <#> So <,> the first time I 'm calling A one and the second time I 'm calling A two <,,> <#> Now the edges remember correspond to nodes that are in conflict <,> nodes that are required by the programme at the same step so if you look back at the diagram originally where I where I described when when you need the different variables you see that <,> the first time A one shows up it 's needed at the same time as B and it 's also needed at some stage at the same time as D <#> C is needed at the same time as D at some point in the programme <#> C is needed at the same time as the second appearance of A <,> at some point in the programme as well and so on <,> <#> So the number of edges is quite small there <,> because well <,> there aren't that many clashes between different nodes <,> <#> Is everyone happy with the graph <#> Okay so that 's a graph that that 's just another way of representing the data of the problem <#> Okay it 's it 's it 's just a different way of presenting it <#> What 's it got to do with a graph colouring <#> Now the colouring of this graph <,,> I suppose this is the crunch sentence in the whole thing <#> The colouring of the graph corresponds to assigning index registers to storage periods <,,></I>