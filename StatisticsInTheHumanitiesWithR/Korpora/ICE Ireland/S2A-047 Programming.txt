<ICE-IRE:S2A-047 Programming><I><ICE-IRE:S2A-047$A> <#> We 're using the Mac uh OS Ten which is available on all the Macs around college now although I don't think it 's working very well just yet <,> uh because the installation isn't quite right <#> Nevertheless uh <,> I 'd like to just say something about it because most of you probably <.> have </.> haven't used it <#> First of all OS-X or OS Ten <,> to give it its proper title is a new uh uh operating system for the Apple Macintosh <#> Now new being it 's about a year and a half old <,> it 's about a year and a half out there uh in its first final version <#> Now the thing about it is that it 's based on Unix <#> Now Unix goes way back to the seventies <#> Okay it 's based on Unix and the the variant of Unix that uh it 's based on <,> literally based on <,> is called Darwin <#> Now this is an Apple computer <,> it 's an Apple made for a variant of Unix that 's based on uh a free version of Unix called FreeBSD <#> Okay and if you 're a Unix head uh it 's FreeBSD four point four that it 's based on <#> It 's it 's extended in the direction of the Mac uh the nice Mac graphical user interface <#> It 's extended in a number of uh nice ways which we don't have to worry about <#> We 're not concerned with them at the moment <#> So you have this operating system that 's based on Unix <#> It 's got a nice uh graphical user interface a nice GUI <,> as we call it <,> called Aqua <,> uh and then underneath that is Darwin <,> or underneath it is Unix <#> And we 're going to have a look at it in a moment because you can actually get at this underneath part of the uh Mac operating system through an application called the Terminal which gives you a standard Unix access to the underpinnings of the of the computer system <#> And uh I 'm going to try and do that in just a moment <,> <#> If you 'd just bear with me for a moment <,,> <#> Uh <unclear> several sylls </unclear> <,> do a couple of things I don't want you to see <,,> <#> Now <,> <#> It 'll just take a second to come up <,,> <#> Okay <#> Now <,> when you go to the Macs in the in the uh east end or anywhere else you 'll have to fish around for this program <#> And the way to do that is to open a new window <,,> a new Finder window <,> and go to the Application Book <#> Right <#> From the Applications Book and you 're still not going to find it <,> you won't have as many programs as this now but you 'll have a folder there called <,> you see it there <,> called Utilities <#> And in the folder you 'll find a program called <,> Terminal <#> Terminal <,> okay <#> Not because it 's the end but because it imitates a machine that used to be called a terminal <,> an old kind of box with a a screen on it which you could put text only <,> not graphics <,> just text on <#> It was an old style <,> you 'll see them in the movies still <,> the old style terminal with the green characters and all that kind of stuff <#> It imitates that pretty much <#> Now you 'll see that I have uh <,> on this machine that <,> my own machine here <,> I have put an icon of the Terminal on the thing here <,> the Dock <,> right <#> You can do that if you want <#> I 'll get rid of this one first just to show you <#> It 's gone <,> right <#> And I bring this one over and put it wherever it is I want it <#> And you should be able to do that when we get the Mac OS Ten set up working properly in in the college <,> it should be able to retain those preferences <#> Anyway <,> you can double click to open the terminal <#> Okay so here you have what you might call a command line interface <,> CLI to the Unix part of the Mac <#> You can actually edit away your own little Unix programs your own little C programs there if you want <#> Okay so if you 're a Linux person or if you 've used Unix before in some way then you might be comforted a little bit to know that underneath this very nice and very swish user interface there 's Unix underneath there for you to to play around with <#> And we might have an example in a moment of actually using Unix directly for our for a <,> for our work <#> Okay so the Terminal window then gives you access and you can do things like you can list the file <,> you can uhm <,> what else can you do <#> Ah you can do lots of things you know <#> Trust me on that one <#> Okay <,> just go back to the PC here for a moment <,> if it 's still there <#> Okay <#> So you can access then Darwin as I said here using the Terminal application <,> <#> Okay <,> Darwin <,> that 's the Unix part <,> the underneath part if you like <#> It 's the latest of of uh Mac OS Ten <#> It has a fairly complete set of Unix stuff in it <#> In particular <,> what we 're going to be interested in <,> it 's got a fairly complete set of Unix tools <#> Now Unix is the <,> and Linux <,> which is a copy of Unix <,> uh they 're both uh hackers ' dreams or geeks ' dreams because there 's lots of stuff inside them that you can play around <,> lots of tools in there that you can manipulate and use to do various things <,> writing programs and debugging programs and all that kind of stuff <#> But specifically the things that are in uh Darwin that are commonly used are C-compilers <,> C-plus-plus compilers <,> and I think I mentioned the last day another variant of C called Objective-C <,> uh these compilers are in there <,> we 'll be using C-plus-plus compilers <#> There 's a debugger to help us visualise what the program 's actually doing and thereby debug it <,> get the bugs out of it <#> Uh there 's a Make utility uh which is for constructing the set of commands needed to to compile a program and actually run it <#> Uh it 's a standard Unix thing and then there are Text Editors <,> uh notably VI and EMax <#> EMax is very old <,> EMax goes back to the late fifties or the early sixties I think it is <#> Uh VI is a bit newer <,> uh but these are old-style text-based uh text-oriented editors for people who consider themselves to be professionals <#> Now what 's really fantastic about these and geeks is that uhm there 's lots of very arcane commands that you have to remember to make good use of VI and EMax <#> And of course if you happen to know those commands and remember them then you 've got this skill that maybe not many other people have so you could show off a little bit <#> That 's the only way I can explain their continued use <#> Okay <#> Cos I don't like them <#> I think they are too hard to follow <,> too hard to use but you can use them if you want <#> You can use them if you want <#> And I 'm going to actually use one now <,> uhm just to show you how you would use all these things <#> Just very quickly <#> And I 'm not recommending you use them <#> But if you 're if you 're <,> if you want to be more comfortable thinking that the Mac has got a fairly standard set of tools based on Unix then this is an example of it <#> Now just let me go back to the to the Mac here <#> Now what I 'm going to do first of all is I 'm going to create a file of uh a tiny little program <,> just that same little program more or less that we had the other day <#> Okay <#> And I 'm going to use the VI editor to do that <#> Okay so I 'm going to say I want to visually edit I think that 's where the VI comes from visual <,> VI <,> visual editor uh and remember this was developed away way back <#> So I 'm going to edit up a little program called uh Sample <#> Uh yeah yeah that right yet <,> <#> Sample dot and I 'm going to put this CPP which stands for kind of C-plus-plus <#> That 's the extension that CPP <#> Uh <,> so again an empty screen and it says <,> I don't know if you can see it at the bottom <,> uh it 's a new file we 're on line one at the top those uh tildes or squiggly things there <,> they 're tildes and they just indicate that there are no lines in the file there <#> That 's just as it were blank space <#> So I 'm now going to put in this program <#> And I have to remember to use the the letter A <#> I 'm sure you can find lots of manuals on VI or EMax if you want <,> and I 'm not going to attempt to explain how to use them uh because we 'll be using the uh the uh graphical user interface version of all this <#> But just to show you <#> So I 'm going to say I want to include <,> so I 'm just writing this program I-O stream <,> you remember that from the last day <#> Uhm we have a program called main <,> a function called main <,> which you will take <#> Now I 'm going to leave out the arguments here <#> You remember I said you need two arguments <#> In fact in some variants of C-plus-plus you don't <#> Okay so I 'll just leave it out for the moment <,> open bracket <,> I 'm going to say I want to leave the tab there I 'm going to C out <#> Hello world <#> Well hello people in the MacNeill where we still are today <#> Okay go onto a new line <#> That 's backslash end there <#> Okay <#> End the quotation <,> end the statement semi-colon right <#> Uhm return <,> zero <,> semi-colon <#> Okay <#> End of program <#> Escape out of that in text <#> Exit the program <#> Okay so I 've made the program up using the VI <,> using the the visual <,> one of the standard editors in uhm in uh Unix <#> Okay <#> Let 's actually make this program <#> Now <,> what we what I 've actually written here is I 've written the source code that is I 've written the C-plus-plus code and that has to get uh processed so that it turns <,> it gets turned into a piece of machine language that the computer can actually execute <#> And the steps under <,> they 're actually detailed in Deitel and Deitel 's book but the steps are that your program <,> the text of your program <,> is said to be compiled into what 's called object code <#> Okay so the text of your program is compiled by a compiler <,> that 's a program <#> It 's compiled into object code and then this object code is linked with a whole lot of other pieces of object code to produce machine code <,> a machine code file <#> And that machine code file is executed <#> Okay so you go from the source code through the compiler to object code through the linker to a file of machine code <#> And then you execute the program by telling the Unix system to run the file that contains the machine code <#> Now just let me go back to the linker <#> The linker links the object code that resulted from your source code being compiled to lots of other object code corresponding to programs that your <,> that the piece of code you 've written may rely on <#> For example this program here relies on the C out facility <#> Actually I 've made a mistake <#> I 'm going to have to just go back and edit that <#> Uhm it relies on the C out facility and the code that implements the C out facility is part of what 's called a Library and the object code for that Library gets linked to the the object code from my uh source code when it was compiled <#> The whole thing together becomes the uh the file of the machine code which we 're going to execute <#> I 've made a mistake on this <#> I should have put STD-colon-colon in front of the C out <#> So maybe I 'll just edit it up now and fix it <#> So I go into VI <,> what did I call it <,> Sample dot CPP <,> okay I 'll just go down and I 'm going to insert STD-colon-colon <#> That didn't quite work out the way I was expecting <#> So I 'll insert a tab and I 'll just go up and remove the tab from there <#> Okay it 's really <,> it it 's not too bad after a while <,> right but but learning the commands for moving around and inserting text and removing text and all that kind of stuff it takes a little bit of uh <,> well you need to have a reason for it basically <#> So let 's see <,> make <#> I 'm going to make <#> Now the make utility that I mentioned in my uh slides there is a standard program that 's available to most Unix systems which will analyse the program that you 've written and it looks particularly at the extension <#> Do you remember we called it dot CPP <#> It looks at that and it uh it tries to work out from that what needs to get done to turn your program into uh machine code okay <#> To compile it <,> to link it <,> to save it in the save the machine code in a particular file and then uh to do all that <#> So I 'm going to say make sample <,,> <#> Okay and here it 's after listing the command that it 's executed</I>