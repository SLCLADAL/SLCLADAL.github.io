{
  "hash": "1d2f3c2756c49ded715f5e88a8944d9d",
  "result": {
    "markdown": "---\ntitle: \"String Processing in R\"\nauthor: \"Martin Schweinberger\"\n---\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://slcladal.github.io/images/uq1.jpg){width=100%}\n:::\n:::\n\n\n# Introduction{-}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://slcladal.github.io/images/gy_chili.jpg){width=15% style=\"float:right; padding:10px\"}\n:::\n:::\n\n\nThis tutorial introduces string processing and it is aimed at beginners and intermediate users of R with the aim of showcasing how to work with and process textual data using R. The aim is not to provide a fully-fledged analysis but rather to show and exemplify selected useful functions and methods associated with text processing. \n\n<div class=\"warning\" style='padding:0.1em; background-color:#f2f2f2; color:#51247a'>\n<span>\n<p style='margin-top:1em; text-align:center'>\nThe entire R Notebook for the tutorial can be downloaded [**here**](https://slcladal.github.io/content/string.Rmd).  If you want to render the R Notebook on your machine, i.e. knitting the document to html or a pdf, you need to make sure that you have R and RStudio installed and you also need to download the [**bibliography file**](https://slcladal.github.io/content/bibliography.bib) and store it in the same folder where you store the Rmd file. <br><br>\n**[Here](https://colab.research.google.com/drive/1Fefa26MM1DxifPpp1iHtJ3ofL_EFSq6V?usp=sharing)** is a **link to an interactive version of this tutorial on Google Colab**. The interactive tutorial is based on a Jupyter notebook of this tutorial. This interactive Jupyter notebook allows you to execute code yourself and - if you copy the Jupyter notebook - you can also change and edit the notebook, e.g. you can change code and upload your own data.<br></p>\n<p style='margin-left:1em;'>\n</p></span>\n</div>\n\n<br>\n\n**Preparation and session set up**\n\nThis tutorial is based on R. If you have not installed R or are new to it, you will find an introduction to and more information how to use R [here](https://slcladal.github.io/intror.html). For this tutorials, we need to install certain *packages* from an R *library* so that the scripts shown below are executed without errors. Before turning to the code below, please install the packages by running the code below this paragraph. If you have already installed the packages mentioned below, then you can skip ahead ignore this section. To install the necessary packages, simply run the following code - it may take some time (between 1 and 5 minutes to install all of the packages so you do not need to worry if it takes some time).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install packages\ninstall.packages(\"tidyverse\")\ninstall.packages(\"htmlwidgets\")\n# install klippy for copy-to-clipboard button in code chunks\ninstall.packages(\"remotes\")\nremotes::install_github(\"rlesur/klippy\")\n```\n:::\n\n\nNow that we have installed the packages, we can activate them as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages for website\nlibrary(tidyverse)\n# activate klippy for copy-to-clipboard button\nklippy::klippy()\n```\n\n::: {.cell-output-display}\n```{=html}\n<script>\n  addClassKlippyTo(\"pre.r, pre.markdown\");\n  addKlippy('left', 'top', 'auto', '1', 'Copy code', 'Copied!');\n</script>\n```\n:::\n:::\n\n\nOnce you have installed RStudio and initiated the session by executing the code shown above, you are good to go.\n\n\n\nBefore we start with string processing, we will load some example texts on which we will perform the processing. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in text\nexampletext  <- base::readRDS(url(\"https://slcladal.github.io/data/tx1.rda\", \"rb\"))\n# inspect\nexampletext\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThis first example text represents a paragraph about grammar.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in text\nsplitexampletext  <- base::readRDS(url(\"https://slcladal.github.io/data/tx2.rda\", \"rb\"))\n# inspect\nsplitexampletext\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language.\"                                                                                                                                                                                                   \n[2] \"These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences).\"\n[3] \"Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"                                                                                                                                                                         \n```\n:::\n:::\n\n\n\n\nThis second example text represents the same paragraph about grammar, but split into individual sentences.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadditionaltext  <- base::readRDS(url(\"https://slcladal.github.io/data/tx3.rda\", \"rb\"))\n# inspect\nadditionaltext\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"In the early 20th century, Ferdinand de Saussure distinguished between the notions of langue and parole in his formulation of structural linguistics. According to him, parole is the specific utterance of speech, whereas langue refers to an abstract phenomenon that theoretically defines the principles and system of rules that govern a language. This distinction resembles the one made by Noam Chomsky between competence and performance in his theory of transformative or generative grammar. According to Chomsky, competence is an individual's innate capacity and potential for language (like in Saussure's langue), while performance is the specific way in which it is used by individuals, groups, and communities (i.e., parole, in Saussurean terms). \"\n```\n:::\n:::\n\n\nThe third example text represents a paragraph about Ferdinand de Saussure - the founder of modern linguistics. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsentences  <- base::readRDS(url(\"https://slcladal.github.io/data/tx4.rda\", \"rb\"))\n# inspect\nsentences\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is a first sentence.\"     \"This is a second sentence.\"   \n[3] \"And this is a third sentence.\"\n```\n:::\n:::\n\n\nThe third example text consist of 3 short plain sentences. \n\nIn the following, we will perform various operations on the example texts.\n\n\n\n# Basic String Processing {-}\n\nBefore turning to functions provided in the `stringr`, let us just briefly focus on some base functions that are extremely useful when working with texts.\n\nA very useful function is, e.g. `tolower` which converts everything to lower case. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntolower(exampletext)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"grammar is a system of rules which governs the production and use of utterances in a given language. these rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). many modern theories that deal with the principles of grammar are based on noam chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nConversely, `toupper` converts everything to upper case. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoupper(exampletext)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"GRAMMAR IS A SYSTEM OF RULES WHICH GOVERNS THE PRODUCTION AND USE OF UTTERANCES IN A GIVEN LANGUAGE. THESE RULES APPLY TO SOUND AS WELL AS MEANING, AND INCLUDE COMPONENTIAL SUBSETS OF RULES, SUCH AS THOSE PERTAINING TO PHONOLOGY (THE ORGANISATION OF PHONETIC SOUND SYSTEMS), MORPHOLOGY (THE FORMATION AND COMPOSITION OF WORDS), AND SYNTAX (THE FORMATION AND COMPOSITION OF PHRASES AND SENTENCES). MANY MODERN THEORIES THAT DEAL WITH THE PRINCIPLES OF GRAMMAR ARE BASED ON NOAM CHOMSKY'S FRAMEWORK OF GENERATIVE LINGUISTICS.\"\n```\n:::\n:::\n\n\n\nThe `stringr` package (see [here](https://raw.githubusercontent.com/rstudio/cheatsheets/main/stringr.pdf) is part of the so-called *tidyverse* - a collection of packages that allows to write R code in a readable manner - and it is the most widely used package for string processing in . The advantage of using `stringr` is that it makes string processing very easy. All `stringr` functions share a common structure:\n\n`str_function(string, pattern)`\n\nThe two arguments in the structure of `stringr` functions are:  *string* which is the character string to be processed and a pattern which is either a simple sequence of characters, a regular expression, or a combination of both. Because the *string* comes first, the `stringr` functions are ideal for piping and thus use in tidyverse style R. \n\nAll function names of `stringr` begin with str, then an underscore and then the name of the action to be performed.  For example, to replace the first occurrence of a pattern in a string, we should use `str_replace()`. In the following, we will use `stringr` functions to perform various operations on the example text. As we have already loaded the `tidyverse` package, we can start right away with using `stringr` functions as shown below.\n\nLike `nchar` in `base`, `str_count` provides the number of characters of a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_count(splitexampletext)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 295 126\n```\n:::\n:::\n\n\nThe function `str_detect` informs about whether a pattern is present in a text and outputs a logical vector with *TRUE* if the pattern occurs and *FALSE* if it does not.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(splitexampletext, \"and\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\nThe function `str_extract` extracts the first occurrence of a pattern, if that pattern is present in a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(exampletext, \"and\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"and\"\n```\n:::\n:::\n\n\nThe function `str_extract_all` extracts all occurrences of a pattern, if that pattern is present in a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(exampletext, \"and\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"and\" \"and\" \"and\" \"and\" \"and\" \"and\"\n```\n:::\n:::\n\n\nThe function `str_locate` provides the start and end position of the match of the pattern in a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_locate(exampletext, \"and\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     start end\n[1,]    59  61\n```\n:::\n:::\n\n\nThe function `str_locate_all` provides the start and end positions of the match of the pattern in a text and displays the result in matrix-form.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_locate_all(exampletext, \"and\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n     start end\n[1,]    59  61\n[2,]   149 151\n[3,]   302 304\n[4,]   329 331\n[5,]   355 357\n[6,]   382 384\n```\n:::\n:::\n\n\nThe function `str_match` extracts the first occurrence of the pattern in a text.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_match(exampletext, \"and\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] \n[1,] \"and\"\n```\n:::\n:::\n\n\nThe function `str_match_all` extracts the all occurrences of the pattern from a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_match_all(exampletext, \"and\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n     [,1] \n[1,] \"and\"\n[2,] \"and\"\n[3,] \"and\"\n[4,] \"and\"\n[5,] \"and\"\n[6,] \"and\"\n```\n:::\n:::\n\n\nThe function `str_remove` removes the first occurrence of a pattern in a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_remove(exampletext, \"and\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production  use of utterances in a given language. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThe function `str_remove_all` removes all occurrences of a pattern from a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_remove_all(exampletext, \"and\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production  use of utterances in a given language. These rules apply to sound as well as meaning,  include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation  composition of words),  syntax (the formation  composition of phrases  sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThe function `str_replace` replaces the first occurrence of a pattern with something else in a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(exampletext, \"and\", \"AND\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production AND use of utterances in a given language. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThe function `str_replace_all` replaces all occurrences of a pattern with something else in a text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace_all(exampletext, \"and\", \"AND\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production AND use of utterances in a given language. These rules apply to sound as well as meaning, AND include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation AND composition of words), AND syntax (the formation AND composition of phrases AND sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThe function `str_starts` tests whether a given text begins with a certain pattern and outputs a logical vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_starts(exampletext, \"and\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nThe function `str_ends` tests whether a text ends with a certain pattern and outputs a logical vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_ends(exampletext, \"and\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nLike `strsplit`, the function `str_split` splits a text when a given pattern occurs. If no pattern is provided, then the text is split into individual symbols.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split(exampletext, \"and\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Grammar is a system of rules which governs the production \"                                                                                            \n[2] \" use of utterances in a given language. These rules apply to sound as well as meaning, \"                                                               \n[3] \" include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation \"\n[4] \" composition of words), \"                                                                                                                              \n[5] \" syntax (the formation \"                                                                                                                               \n[6] \" composition of phrases \"                                                                                                                              \n[7] \" sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"           \n```\n:::\n:::\n\n\nThe function `str_split_fixed` splits a text when a given pattern occurs but only so often as is indicated by the argument `n`. So, even if the patter occur more often than `n`, `str_split_fixed` will only split the text `n` times.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split_fixed(exampletext, \"and\", n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]                                                        \n[1,] \"Grammar is a system of rules which governs the production \"\n     [,2]                                                                                     \n[1,] \" use of utterances in a given language. These rules apply to sound as well as meaning, \"\n     [,3]                                                                                                                                                                                                                                                                                                                                                                                  \n[1,] \" include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThe function `str_subset` extracts those subsets of a text that contain a certain pattern.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_subset(splitexampletext, \"and\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language.\"                                                                                                                                                                                                   \n[2] \"These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences).\"\n```\n:::\n:::\n\n\nThe function `str_which` provides a vector with the indices of the texts that contain a certain pattern. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_which(splitexampletext, \"and\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n:::\n\n\nThe function `str_view` shows the locations of the first instances of a pattern in a text or vector of texts.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(splitexampletext, \"and\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-c4f4edfe4504e830bac8\" style=\"width:960px;height:100%;\" class=\"str_view html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c4f4edfe4504e830bac8\">{\"x\":{\"html\":\"<ul>\\n  <li>Grammar is a system of rules which governs the production <span class='match'>and<\\/span> use of utterances in a given language.<\\/li>\\n  <li>These rules apply to sound as well as meaning, <span class='match'>and<\\/span> include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences).<\\/li>\\n  <li>Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.<\\/li>\\n<\\/ul>\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nThe function `str_view_all` shows the locations of all instances of a pattern in a text or vector of texts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view_all(exampletext, \"and\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-fc581ab412b2d48f1ca2\" style=\"width:960px;height:100%;\" class=\"str_view html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-fc581ab412b2d48f1ca2\">{\"x\":{\"html\":\"<ul>\\n  <li>Grammar is a system of rules which governs the production <span class='match'>and<\\/span> use of utterances in a given language. These rules apply to sound as well as meaning, <span class='match'>and<\\/span> include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation <span class='match'>and<\\/span> composition of words), <span class='match'>and<\\/span> syntax (the formation <span class='match'>and<\\/span> composition of phrases <span class='match'>and<\\/span> sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.<\\/li>\\n<\\/ul>\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nThe function `str_pad` adds white spaces to a text or vector of texts so that they reach a given number of symbols.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create text with white spaces\ntext <- \" this    is a    text   \"\nstr_pad(text, width = 30)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"       this    is a    text   \"\n```\n:::\n:::\n\n\nThe function `str_trim` removes white spaces from the beginning(s) and end(s) of a text or vector of texts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_trim(text) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"this    is a    text\"\n```\n:::\n:::\n\n\nThe function `str_squish` removes white spaces that occur within a text or vector of texts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_squish(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"this is a text\"\n```\n:::\n:::\n\n\nThe function `str_wrap` removes white spaces  from the beginning(s) and end(s) of a text or vector of texts and also those white spaces that occur within a text or vector of texts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_wrap(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"this is a text\"\n```\n:::\n:::\n\n\nThe function `str_order` provides a vector that represents the order of a vector of texts according to the lengths of texts in that vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_order(splitexampletext)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 2\n```\n:::\n:::\n\n\nThe function `str_sort` orders of a vector of texts according to the lengths of texts in that vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_sort(splitexampletext)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language.\"                                                                                                                                                                                                   \n[2] \"Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"                                                                                                                                                                         \n[3] \"These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences).\"\n```\n:::\n:::\n\n\nThe function `str_to_upper` converts all symbols in a text or vector of texts to upper case.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_to_upper(exampletext) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"GRAMMAR IS A SYSTEM OF RULES WHICH GOVERNS THE PRODUCTION AND USE OF UTTERANCES IN A GIVEN LANGUAGE. THESE RULES APPLY TO SOUND AS WELL AS MEANING, AND INCLUDE COMPONENTIAL SUBSETS OF RULES, SUCH AS THOSE PERTAINING TO PHONOLOGY (THE ORGANISATION OF PHONETIC SOUND SYSTEMS), MORPHOLOGY (THE FORMATION AND COMPOSITION OF WORDS), AND SYNTAX (THE FORMATION AND COMPOSITION OF PHRASES AND SENTENCES). MANY MODERN THEORIES THAT DEAL WITH THE PRINCIPLES OF GRAMMAR ARE BASED ON NOAM CHOMSKY'S FRAMEWORK OF GENERATIVE LINGUISTICS.\"\n```\n:::\n:::\n\n\nThe function `str_to_lower` converts all symbols in a text or vector of texts to lower case.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_to_lower(exampletext) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"grammar is a system of rules which governs the production and use of utterances in a given language. these rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). many modern theories that deal with the principles of grammar are based on noam chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThe function `str_c` combines texts into one text\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(exampletext, additionaltext)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.In the early 20th century, Ferdinand de Saussure distinguished between the notions of langue and parole in his formulation of structural linguistics. According to him, parole is the specific utterance of speech, whereas langue refers to an abstract phenomenon that theoretically defines the principles and system of rules that govern a language. This distinction resembles the one made by Noam Chomsky between competence and performance in his theory of transformative or generative grammar. According to Chomsky, competence is an individual's innate capacity and potential for language (like in Saussure's langue), while performance is the specific way in which it is used by individuals, groups, and communities (i.e., parole, in Saussurean terms). \"\n```\n:::\n:::\n\n\nThe function `str_conv` converts a text into a certain type of encoding, e.g. into `UTF-8` or `Latin1`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_conv(exampletext, encoding = \"UTF-8\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThe function `str_dup` reduplicates a text or a vector of texts n times.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_dup(exampletext, times=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.Grammar is a system of rules which governs the production and use of utterances in a given language. These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences). Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"\n```\n:::\n:::\n\n\nThe function `str_flatten` combines a vector of texts into one text. The argument `collapse` defines the symbol that occurs between the combined texts. If the argument `collapse` is left out, the texts will be combined without any symbol between the combined texts.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_flatten(sentences, collapse = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is a first sentence. This is a second sentence. And this is a third sentence.\"\n```\n:::\n:::\n\n\n If the argument `collapse` is left out, the texts will be combined without any symbol between the combined texts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_flatten(sentences)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is a first sentence.This is a second sentence.And this is a third sentence.\"\n```\n:::\n:::\n\n\nThe function `str_length` provides the length of texts in characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_length(exampletext)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 523\n```\n:::\n:::\n\n\nThe function `str_replace_na` replaces NA in texts. It is important to note that NA, if it occurs within a string, is considered to be the literal string `NA`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create sentences with NA\nsentencesna <- c(\"Some text\", NA, \"Some more text\", \"Some NA text\")\n# apply str_replace_na function\nstr_replace_na(sentencesna, replacement = \"Something new\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Some text\"      \"Something new\"  \"Some more text\" \"Some NA text\"  \n```\n:::\n:::\n\n\nThe function `str_trunc` ends strings with ... after a certain number of characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_trunc(sentences, width = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is a first s...\" \"This is a second ...\" \"And this is a thi...\"\n```\n:::\n:::\n\n\nThe function `str_sub` extracts a string from a text from a start location to an end position (expressed as character positions).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_sub(exampletext, 5, 25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"mar is a system of ru\"\n```\n:::\n:::\n\n\nThe function `word` extracts words from a text (expressed as word positions).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword(exampletext, 2:7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"is\"     \"a\"      \"system\" \"of\"     \"rules\"  \"which\" \n```\n:::\n:::\n\n\n\nThe function `str_glue` combines strings and allows to input variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Fred\"\nage <- 50\nanniversary <- as.Date(\"1991-10-12\")\nstr_glue(\n  \"My name is {name}, \",\n  \"my age next year is {age + 1}, \",\n  \"and my anniversary is {format(anniversary, '%A, %B %d, %Y')}.\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy name is Fred, my age next year is 51, and my anniversary is Saturday, October 12, 1991.\n```\n:::\n:::\n\n\nThe function `str_glue_data` is particularly useful when it is used in data pipelines. The data set `mtcars` is a build in data set that is loaded automatically when starting R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  str_glue_data(\"{rownames(.)} has {hp} hp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMazda RX4 has 110 hp\nMazda RX4 Wag has 110 hp\nDatsun 710 has 93 hp\nHornet 4 Drive has 110 hp\nHornet Sportabout has 175 hp\nValiant has 105 hp\nDuster 360 has 245 hp\nMerc 240D has 62 hp\nMerc 230 has 95 hp\nMerc 280 has 123 hp\nMerc 280C has 123 hp\nMerc 450SE has 180 hp\nMerc 450SL has 180 hp\nMerc 450SLC has 180 hp\nCadillac Fleetwood has 205 hp\nLincoln Continental has 215 hp\nChrysler Imperial has 230 hp\nFiat 128 has 66 hp\nHonda Civic has 52 hp\nToyota Corolla has 65 hp\nToyota Corona has 97 hp\nDodge Challenger has 150 hp\nAMC Javelin has 150 hp\nCamaro Z28 has 245 hp\nPontiac Firebird has 175 hp\nFiat X1-9 has 66 hp\nPorsche 914-2 has 91 hp\nLotus Europa has 113 hp\nFord Pantera L has 264 hp\nFerrari Dino has 175 hp\nMaserati Bora has 335 hp\nVolvo 142E has 109 hp\n```\n:::\n:::\n\n\n\n\n\n***\n\n<div class=\"warning\" style='padding:0.1em; background-color:#51247a; color:#f2f2f2'>\n<span>\n<p style='margin-top:1em; text-align:center'>\n<b>EXERCISE TIME!</b></p>\n<p style='margin-left:1em;'>\n</p></span>\n</div>\n\n<div class=\"question\">` \n\n1. Load the text `linguistics04`. How many words does the text consist of?\n\n<details>\n  <summary>Answer</summary>\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  readLines(\"https://slcladal.github.io/data/testcorpus/linguistics04.txt\") %>%\n  paste0(collapse = \" \") %>%\n  strsplit(\" \") %>%\n  unlist() %>%\n  length()\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  ```\n  [1] 101\n  ```\n  :::\n  :::\n\n</details>\n\n2. How many characters does the text consist of?\n\n<details>\n  <summary>Answer</summary>\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  readLines(\"https://slcladal.github.io/data/testcorpus/linguistics04.txt\") %>%\n  paste0(collapse = \" \") %>%\n  strsplit(\"\") %>%\n  unlist() %>%\n  length()\n  ```\n  \n  ::: {.cell-output .cell-output-stdout}\n  ```\n  [1] 673\n  ```\n  :::\n  :::\n\n</details>\n\n</div>`\n\n***\n\n# Advanced String Processing {-}\n\nAbove, we have used functions and regular expressions to extract and find patters in textual data. Here, we will focus on common methods for cleaning text data that are applied before implementing certain methods.\n\nWe start by installing and then loading some additional packages, e.g., the `quanteda` (see [here](https://raw.githubusercontent.com/rstudio/cheatsheets/main/quanteda.pdf) for a cheat sheet for the `quanteda` package), the `tm`, and the `udpipe` package, which are extremely useful when dealing with more advanced text processing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"quanteda\")\ninstall.packages(\"tm\")\ninstall.packages(\"udpipe\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quanteda)\nlibrary(tm)\nlibrary(udpipe) \n```\n:::\n\n\nOne common procedure is to split texts into sentences which we can do by using, e.g., the  `tokenize_sentence` function from the `quanteda` package. I also unlist the data to have a vector wot work with (rather than a list).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\net_sent <- quanteda::tokenize_sentence(exampletext) %>%\n  unlist()\n# inspect\net_sent\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language.\"                                                                                                                                                                                                   \n[2] \"These rules apply to sound as well as meaning, and include componential subsets of rules, such as those pertaining to phonology (the organisation of phonetic sound systems), morphology (the formation and composition of words), and syntax (the formation and composition of phrases and sentences).\"\n[3] \"Many modern theories that deal with the principles of grammar are based on Noam Chomsky's framework of generative linguistics.\"                                                                                                                                                                         \n```\n:::\n:::\n\n\nAnother common procedure is to remove stop words, i.e., words that do not have semantic or referential meaning (like nouns such as *tree* or *cat*, or verbs like *sit* or *speak* or adjectives such as *green* or *loud*) but that indicate syntactic relations, roles, or features.(e.g., articles and pronouns). We can remove stopwords using, e.g., the  `removeWords` function from the `tm` package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\net_wostop <-  tm::removeWords(exampletext, tm::stopwords(\"english\"))\n# inspect\net_wostop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar   system  rules  governs  production  use  utterances   given language. These rules apply  sound  well  meaning,  include componential subsets  rules,    pertaining  phonology ( organisation  phonetic sound systems), morphology ( formation  composition  words),  syntax ( formation  composition  phrases  sentences). Many modern theories  deal   principles  grammar  based  Noam Chomsky's framework  generative linguistics.\"\n```\n:::\n:::\n\n\nTo remove the superfluous whote spaces, we can use, e.g., the  `stripWhitespace` function from the `tm` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\net_wows <-  tm::stripWhitespace(et_wostop)\n# inspect\net_wows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar system rules governs production use utterances given language. These rules apply sound well meaning, include componential subsets rules, pertaining phonology ( organisation phonetic sound systems), morphology ( formation composition words), syntax ( formation composition phrases sentences). Many modern theories deal principles grammar based Noam Chomsky's framework generative linguistics.\"\n```\n:::\n:::\n\n\nIt can also be useful to remove numbers. We can do this using, e.g., the  `removeNumbers` function from the `tm` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\net_wonum <-  tm::removeNumbers(\"This is the 1 and only sentence I will write in 2022.\")\n# inspect\net_wonum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is the  and only sentence I will write in .\"\n```\n:::\n:::\n\n\nWe may also want to remove any type of punctuation using, e.g., the  `removePunctuation` function from the `tm` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\net_wopunct <-  tm::removePunctuation(exampletext)\n# inspect\net_wopunct\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grammar is a system of rules which governs the production and use of utterances in a given language These rules apply to sound as well as meaning and include componential subsets of rules such as those pertaining to phonology the organisation of phonetic sound systems morphology the formation and composition of words and syntax the formation and composition of phrases and sentences Many modern theories that deal with the principles of grammar are based on Noam Chomskys framework of generative linguistics\"\n```\n:::\n:::\n\n\nWe may also want to stem the words in a  document, i.e. removing the ends of words to be able to group together semantically related words such as *walk*, *walks*, *walking*, *walked* which would all be stemmed into *walk*. We can stem a text using, e.g., the  `stemDocument` function from the `tm` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\net_stem <-  tm::stemDocument(exampletext, language = \"en\")\n# inspect\net_stem\n```\n:::\n\n\n**Tokenization, lemmatization, pos-tagging, and dependency parsing**\n\nA far better option than stemming is lemmatization as lemmatization is based on proper morphological information and vocabularies. For lemmatization, we can use the `udpipe` package which also tokenizes texts, adds part-of-speech tags, and provides information about dependency relations. \n\nBefore we can tokenize, lemmatize, pos-tag and parse though, we need to download a pre-trained language model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# download language model\nm_eng   <- udpipe::udpipe_download_model(language = \"english-ewt\")\n```\n:::\n\n\n\nIf you have downloaded a model once, you can also load the model directly from the place where you stored it on your computer. In my case, I have stored the model in a folder called udpipemodels\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load language model from your computer after you have downloaded it once\nm_eng <- udpipe_load_model(file = here::here(\"udpipemodels\",\n                                             \"english-ewt-ud-2.5-191206.udpipe\"))\n```\n:::\n\n\nWe can now use the model to annotate out text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tokenise, tag, dependency parsing\ntext_anndf <- udpipe::udpipe_annotate(m_eng, x = exampletext) %>%\n  as.data.frame() %>%\n  dplyr::select(-sentence)\n# inspect\nhead(text_anndf, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   doc_id paragraph_id sentence_id token_id      token      lemma  upos xpos\n1    doc1            1           1        1    Grammar    Grammar PROPN  NNP\n2    doc1            1           1        2         is         be   AUX  VBZ\n3    doc1            1           1        3          a          a   DET   DT\n4    doc1            1           1        4     system     system  NOUN   NN\n5    doc1            1           1        5         of         of   ADP   IN\n6    doc1            1           1        6      rules       rule  NOUN  NNS\n7    doc1            1           1        7      which      which  PRON  WDT\n8    doc1            1           1        8    governs     govern  VERB  VBZ\n9    doc1            1           1        9        the        the   DET   DT\n10   doc1            1           1       10 production production  NOUN   NN\n                                                   feats head_token_id\n1                                            Number=Sing             4\n2  Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin             4\n3                              Definite=Ind|PronType=Art             4\n4                                            Number=Sing             0\n5                                                   <NA>             6\n6                                            Number=Plur             4\n7                                           PronType=Rel             8\n8  Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin             4\n9                              Definite=Def|PronType=Art            10\n10                                           Number=Sing             8\n     dep_rel deps misc\n1      nsubj <NA> <NA>\n2        cop <NA> <NA>\n3        det <NA> <NA>\n4       root <NA> <NA>\n5       case <NA> <NA>\n6       nmod <NA> <NA>\n7      nsubj <NA> <NA>\n8  acl:relcl <NA> <NA>\n9        det <NA> <NA>\n10       obj <NA> <NA>\n```\n:::\n:::\n\n\nWe could, of course, perform many more manipulations of textual data but this should suffice to get you started.\n\n# Citation & Session Info {-}\n\nSchweinberger, Martin. 2022. *String processing in R*. Brisbane: The University of Queensland. url: https://slcladal.github.io/string.html (Version 2022.08.31).\n\n```\n@manual{schweinberger2022string,\n  author = {Schweinberger, Martin},\n  title = {String processing in R},\n  note = {https://slcladal.github.io/string.html},\n  year = {2022},\n  organization = {The University of Queensland, School of Languages and Cultures},\n  address = {Brisbane},\n  edition = {2022.08.31}\n}\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.1 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8    \n [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8   \n [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] udpipe_0.8.9    tm_0.7-8        NLP_0.2-1       quanteda_3.2.1 \n [5] forcats_0.5.1   stringr_1.4.0   dplyr_1.0.9     purrr_0.3.4    \n [9] readr_2.1.2     tidyr_1.2.0     tibble_3.1.7    ggplot2_3.3.6  \n[13] tidyverse_1.3.2\n\nloaded via a namespace (and not attached):\n [1] httr_1.4.3          jsonlite_1.8.0      here_1.0.1         \n [4] modelr_0.1.8        RcppParallel_5.1.5  assertthat_0.2.1   \n [7] googlesheets4_1.0.0 cellranger_1.1.0    yaml_2.3.5         \n[10] slam_0.1-50         pillar_1.7.0        backports_1.4.1    \n[13] lattice_0.20-45     glue_1.6.2          digest_0.6.29      \n[16] rvest_1.0.2         colorspace_2.0-3    htmltools_0.5.2    \n[19] Matrix_1.4-1        pkgconfig_2.0.3     broom_1.0.0        \n[22] haven_2.5.0         scales_1.2.0        tzdb_0.3.0         \n[25] googledrive_2.0.0   generics_0.1.3      ellipsis_0.3.2     \n[28] withr_2.5.0         klippy_0.0.0.9500   cli_3.3.0          \n[31] magrittr_2.0.3      crayon_1.5.1        readxl_1.4.0       \n[34] evaluate_0.15       stopwords_2.3       fs_1.5.2           \n[37] fansi_1.0.3         xml2_1.3.3          tools_4.2.1        \n[40] data.table_1.14.2   hms_1.1.1           gargle_1.2.0       \n[43] lifecycle_1.0.1     munsell_0.5.0       reprex_2.0.1       \n[46] compiler_4.2.1      rlang_1.0.4         grid_4.2.1         \n[49] rstudioapi_0.13     htmlwidgets_1.5.4   rmarkdown_2.14     \n[52] gtable_0.3.0        DBI_1.1.3           R6_2.5.1           \n[55] lubridate_1.8.0     knitr_1.39          fastmap_1.1.0      \n[58] utf8_1.2.2          fastmatch_1.1-3     rprojroot_2.0.3    \n[61] stringi_1.7.8       parallel_4.2.1      Rcpp_1.0.8.3       \n[64] vctrs_0.4.1         dbplyr_2.2.1        tidyselect_1.1.2   \n[67] xfun_0.31          \n```\n:::\n:::\n\n\n***\n\n[Back to top](#introduction)\n\n[Back to HOME](https://slcladal.github.io/index.html)\n\n***\n\n\n# References{-}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/clipboard-1.7.1/clipboard.min.js\"></script>\n<link href=\"site_libs/primer-tooltips-1.4.0/build.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/klippy-0.0.0.9500/css/klippy.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/klippy-0.0.0.9500/js/klippy.min.js\"></script>\n<script src=\"site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/str_view-0.1.0/str_view.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/str_view-binding-1.4.0/str_view.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}